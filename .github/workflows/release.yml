name: Release on main commits

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
            ext: ""
            archive: tar.gz
          - os: linux
            arch: arm64
            ext: ""
            archive: tar.gz
          - os: darwin
            arch: amd64
            ext: ""
            archive: tar.gz
          - os: darwin
            arch: arm64
            ext: ""
            archive: tar.gz
          - os: windows
            arch: amd64
            ext: ".exe"
            archive: zip
          - os: windows
            arch: arm64
            ext: ".exe"
            archive: zip

    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Build binary
        run: |
          mkdir -p dist
          BIN_NAME=oncall-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          export CGO_ENABLED=0
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -trimpath -ldflags "-s -w" -o "dist/${BIN_NAME}" .

      - name: Package artifact
        run: |
          cd dist
          NAME="oncall-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip "${NAME}.zip" "${NAME}${{ matrix.ext }}"
          else
            tar -czf "${NAME}.tar.gz" "${NAME}${{ matrix.ext }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/*.zip
            dist/*.tar.gz
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binaries-*
          merge-multiple: true

      - name: Compute tag
        id: tag
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "tag=v0.0.0-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: |
            Automated build for commit ${{ github.sha }}.
            Generated by GitHub Actions.
          generate_release_notes: true
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


